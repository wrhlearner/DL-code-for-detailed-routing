1. Executing Verilog-2005 frontend: ./designs/src/tinyRocket/AsyncResetReg.v
2. Executing Verilog-2005 frontend: ./designs/src/tinyRocket/ClockDivider2.v
3. Executing Verilog-2005 frontend: ./designs/src/tinyRocket/ClockDivider3.v
4. Executing Verilog-2005 frontend: ./designs/src/tinyRocket/plusarg_reader.v
5. Executing Verilog-2005 frontend: ./designs/src/tinyRocket/freechips.rocketchip.system.TinyConfig.v
6. Executing Verilog-2005 frontend: ./designs/nangate45/tinyRocket/freechips.rocketchip.system.TinyConfig.v
7. Executing Liberty frontend: ./objects/nangate45/tinyRocket/base/lib/NangateOpenCellLibrary_typical.lib
8. Executing Liberty frontend: ./objects/nangate45/tinyRocket/base/lib/fakeram45_1024x32.lib
9. Executing Liberty frontend: ./objects/nangate45/tinyRocket/base/lib/fakeram45_64x32.lib
10. Executing Verilog-2005 frontend: /home/jborg/Data/Research/DLPnR/OpenROAD-flow-scripts/flow/platforms/nangate45/cells_clkgate.v
Using ABC speed script.
[FLOW] Extracting clock period from SDC file: ./results/nangate45/tinyRocket/base/clock_period.txt
[FLOW] Setting clock period to 2.0322
11. Executing SYNTH pass.
11.1. Executing HIERARCHY pass (managing design hierarchy).
11.2. Executing AST frontend in derive mode using pre-parsed AST for module `\RocketTile'.
11.2.1. Analyzing design hierarchy..
11.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\Rocket'.
11.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\PTW'.
11.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\HellaCacheArbiter'.
11.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\IntSyncCrossingSink_2'.
11.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\IntSyncCrossingSink_1'.
11.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\IntSyncCrossingSink'.
11.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\TLBuffer_11'.
11.2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\TLBuffer_10'.
11.2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\TLFragmenter_5'.
11.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\ScratchpadSlavePort'.
11.2.12. Executing AST frontend in derive mode using pre-parsed AST for module `\Frontend'.
11.2.13. Executing AST frontend in derive mode using pre-parsed AST for module `\DCache'.
11.2.14. Executing AST frontend in derive mode using pre-parsed AST for module `\IntXbar_4'.
11.2.15. Executing AST frontend in derive mode using pre-parsed AST for module `\TLXbar_9'.
11.2.16. Executing AST frontend in derive mode using pre-parsed AST for module `\TLXbar_8'.
11.2.17. Analyzing design hierarchy..
11.2.18. Executing AST frontend in derive mode using pre-parsed AST for module `\TLMonitor_36'.
11.2.19. Executing AST frontend in derive mode using pre-parsed AST for module `\TLMonitor_35'.
11.2.20. Executing AST frontend in derive mode using pre-parsed AST for module `\AMOALU'.
11.2.21. Executing AST frontend in derive mode using pre-parsed AST for module `\TLB'.
11.2.22. Executing AST frontend in derive mode using pre-parsed AST for module `\DCacheModuleanon3'.
11.2.23. Executing AST frontend in derive mode using pre-parsed AST for module `\DCacheDataArray'.
11.2.24. Executing AST frontend in derive mode using pre-parsed AST for module `\DCacheModuleanon2'.
11.2.25. Executing AST frontend in derive mode using pre-parsed AST for module `\TLB_1'.
11.2.26. Executing AST frontend in derive mode using pre-parsed AST for module `\ShiftQueue'.
11.2.27. Executing AST frontend in derive mode using pre-parsed AST for module `\ICache'.
11.2.28. Executing AST frontend in derive mode using pre-parsed AST for module `\Repeater_5'.
11.2.29. Executing AST frontend in derive mode using pre-parsed AST for module `\Queue_39'.
11.2.30. Executing AST frontend in derive mode using pre-parsed AST for module `\Queue_38'.
11.2.31. Executing AST frontend in derive mode using pre-parsed AST for module `\TLMonitor_37'.
11.2.32. Executing AST frontend in derive mode using pre-parsed AST for module `\Queue_41'.
11.2.33. Executing AST frontend in derive mode using pre-parsed AST for module `\Queue_40'.
11.2.34. Executing AST frontend in derive mode using pre-parsed AST for module `\SynchronizerShiftReg_w1_d3'.
11.2.35. Executing AST frontend in derive mode using pre-parsed AST for module `\PlusArgTimeout'.
11.2.36. Executing AST frontend in derive mode using pre-parsed AST for module `\MulDiv'.
11.2.37. Executing AST frontend in derive mode using pre-parsed AST for module `\ALU'.
11.2.38. Executing AST frontend in derive mode using pre-parsed AST for module `\BreakpointUnit'.
11.2.39. Executing AST frontend in derive mode using pre-parsed AST for module `\CSRFile'.
11.2.40. Executing AST frontend in derive mode using pre-parsed AST for module `\IBuf'.
11.2.41. Analyzing design hierarchy..
11.2.42. Executing AST frontend in derive mode using pre-parsed AST for module `\RVCExpander'.
11.2.43. Executing AST frontend in derive mode using pre-parsed AST for module `\plusarg_reader'.
11.2.44. Executing AST frontend in derive mode using pre-parsed AST for module `\plusarg_reader'.
11.2.45. Executing AST frontend in derive mode using pre-parsed AST for module `\data_arrays_0_0'.
11.2.46. Executing AST frontend in derive mode using pre-parsed AST for module `\tag_array'.
11.2.47. Executing AST frontend in derive mode using pre-parsed AST for module `\PMPChecker'.
11.2.48. Executing AST frontend in derive mode using pre-parsed AST for module `\data_arrays_0'.
11.2.49. Analyzing design hierarchy..
11.2.50. Executing AST frontend in derive mode using pre-parsed AST for module `\data_arrays_0_ext'.
11.2.51. Executing AST frontend in derive mode using pre-parsed AST for module `\tag_array_ext'.
11.2.52. Executing AST frontend in derive mode using pre-parsed AST for module `\data_arrays_0_0_ext'.
./designs/nangate45/tinyRocket/freechips.rocketchip.system.TinyConfig.v:101: Warning: Range select out of bounds on signal `\RW0_wmask': Setting result bit to undef.
11.2.53. Analyzing design hierarchy..
11.2.54. Analyzing design hierarchy..
11.3. Executing PROC pass (convert processes to netlists).
11.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
11.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
11.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
11.3.4. Executing PROC_INIT pass (extract init attributes).
11.3.5. Executing PROC_ARST pass (detect async resets in processes).
11.3.6. Executing PROC_ROM pass (convert switches to ROMs).
11.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
11.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
11.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
11.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
11.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
11.3.12. Executing OPT_EXPR pass (perform const folding).
11.4. Executing OPT_EXPR pass (perform const folding).
11.5. Executing OPT_CLEAN pass (remove unused cells and wires).
11.6. Executing CHECK pass (checking for obvious problems).
11.7. Executing OPT pass (performing simple optimizations).
11.7.1. Executing OPT_EXPR pass (perform const folding).
11.7.2. Executing OPT_MERGE pass (detect identical cells).
11.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.7.5. Executing OPT_MERGE pass (detect identical cells).
11.7.6. Executing OPT_DFF pass (perform DFF optimizations).
11.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
11.7.8. Executing OPT_EXPR pass (perform const folding).
11.7.9. Rerunning OPT passes. (Maybe there is more to do..)
11.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.7.12. Executing OPT_MERGE pass (detect identical cells).
11.7.13. Executing OPT_DFF pass (perform DFF optimizations).
11.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.7.15. Executing OPT_EXPR pass (perform const folding).
11.7.16. Finished OPT passes. (There is nothing left to do.)
11.8. Executing FSM pass (extract and optimize FSM).
11.8.1. Executing FSM_DETECT pass (finding FSMs in design).
11.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
11.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
11.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
11.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
11.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
11.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
11.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
11.9. Executing OPT pass (performing simple optimizations).
11.9.1. Executing OPT_EXPR pass (perform const folding).
11.9.2. Executing OPT_MERGE pass (detect identical cells).
11.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.9.5. Executing OPT_MERGE pass (detect identical cells).
11.9.6. Executing OPT_DFF pass (perform DFF optimizations).
11.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
11.9.8. Executing OPT_EXPR pass (perform const folding).
11.9.9. Rerunning OPT passes. (Maybe there is more to do..)
11.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.9.12. Executing OPT_MERGE pass (detect identical cells).
11.9.13. Executing OPT_DFF pass (perform DFF optimizations).
11.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.9.15. Executing OPT_EXPR pass (perform const folding).
11.9.16. Rerunning OPT passes. (Maybe there is more to do..)
11.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.9.19. Executing OPT_MERGE pass (detect identical cells).
11.9.20. Executing OPT_DFF pass (perform DFF optimizations).
11.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
11.9.22. Executing OPT_EXPR pass (perform const folding).
11.9.23. Finished OPT passes. (There is nothing left to do.)
11.10. Executing WREDUCE pass (reducing word size of cells).
11.11. Executing PEEPOPT pass (run peephole optimizers).
11.12. Executing OPT_CLEAN pass (remove unused cells and wires).
11.13. Executing ALUMACC pass (create $alu and $macc cells).
11.14. Executing SHARE pass (SAT-based resource sharing).
11.15. Executing OPT pass (performing simple optimizations).
11.15.1. Executing OPT_EXPR pass (perform const folding).
11.15.2. Executing OPT_MERGE pass (detect identical cells).
11.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.15.5. Executing OPT_MERGE pass (detect identical cells).
11.15.6. Executing OPT_DFF pass (perform DFF optimizations).
11.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
11.15.8. Executing OPT_EXPR pass (perform const folding).
11.15.9. Rerunning OPT passes. (Maybe there is more to do..)
11.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.15.12. Executing OPT_MERGE pass (detect identical cells).
11.15.13. Executing OPT_DFF pass (perform DFF optimizations).
11.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.15.15. Executing OPT_EXPR pass (perform const folding).
11.15.16. Finished OPT passes. (There is nothing left to do.)
11.16. Executing MEMORY pass.
11.16.1. Executing OPT_MEM pass (optimize memories).
11.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
11.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
11.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
11.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
11.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
11.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
11.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
11.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
11.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).
11.17. Executing OPT_CLEAN pass (remove unused cells and wires).
11.18. Executing OPT pass (performing simple optimizations).
11.18.1. Executing OPT_EXPR pass (perform const folding).
11.18.2. Executing OPT_MERGE pass (detect identical cells).
11.18.3. Executing OPT_DFF pass (perform DFF optimizations).
11.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
11.18.5. Rerunning OPT passes. (Removed registers in this run.)
11.18.6. Executing OPT_EXPR pass (perform const folding).
11.18.7. Executing OPT_MERGE pass (detect identical cells).
11.18.8. Executing OPT_DFF pass (perform DFF optimizations).
11.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
11.18.10. Rerunning OPT passes. (Removed registers in this run.)
11.18.11. Executing OPT_EXPR pass (perform const folding).
11.18.12. Executing OPT_MERGE pass (detect identical cells).
11.18.13. Executing OPT_DFF pass (perform DFF optimizations).
11.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.18.15. Rerunning OPT passes. (Removed registers in this run.)
11.18.16. Executing OPT_EXPR pass (perform const folding).
11.18.17. Executing OPT_MERGE pass (detect identical cells).
11.18.18. Executing OPT_DFF pass (perform DFF optimizations).
11.18.19. Executing OPT_CLEAN pass (remove unused cells and wires).
11.18.20. Finished fast OPT passes.
11.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
11.20. Executing OPT pass (performing simple optimizations).
11.20.1. Executing OPT_EXPR pass (perform const folding).
11.20.2. Executing OPT_MERGE pass (detect identical cells).
11.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.20.5. Executing OPT_MERGE pass (detect identical cells).
11.20.6. Executing OPT_SHARE pass.
11.20.7. Executing OPT_DFF pass (perform DFF optimizations).
11.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
11.20.9. Executing OPT_EXPR pass (perform const folding).
11.20.10. Rerunning OPT passes. (Maybe there is more to do..)
11.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.20.13. Executing OPT_MERGE pass (detect identical cells).
11.20.14. Executing OPT_SHARE pass.
11.20.15. Executing OPT_DFF pass (perform DFF optimizations).
11.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
11.20.17. Executing OPT_EXPR pass (perform const folding).
11.20.18. Rerunning OPT passes. (Maybe there is more to do..)
11.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.20.21. Executing OPT_MERGE pass (detect identical cells).
11.20.22. Executing OPT_SHARE pass.
11.20.23. Executing OPT_DFF pass (perform DFF optimizations).
11.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
11.20.25. Executing OPT_EXPR pass (perform const folding).
11.20.26. Rerunning OPT passes. (Maybe there is more to do..)
11.20.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
11.20.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
11.20.29. Executing OPT_MERGE pass (detect identical cells).
11.20.30. Executing OPT_SHARE pass.
11.20.31. Executing OPT_DFF pass (perform DFF optimizations).
11.20.32. Executing OPT_CLEAN pass (remove unused cells and wires).
11.20.33. Executing OPT_EXPR pass (perform const folding).
11.20.34. Finished OPT passes. (There is nothing left to do.)
11.21. Executing TECHMAP pass (map to technology primitives).
11.21.1. Executing Verilog-2005 frontend: /home/jborg/Data/Research/DLPnR/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v
11.21.2. Continuing TECHMAP pass.
11.22. Executing OPT pass (performing simple optimizations).
11.22.1. Executing OPT_EXPR pass (perform const folding).
11.22.2. Executing OPT_MERGE pass (detect identical cells).
11.22.3. Executing OPT_DFF pass (perform DFF optimizations).
11.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
11.22.5. Finished fast OPT passes.
11.23. Executing ABC pass (technology mapping using ABC).
11.23.1. Extracting gate netlist of module `$paramod$b654f231d8a18dbefa42b5e11236880768fd38b8\plusarg_reader' to `<abc-temp-dir>/input.blif'..
11.23.2. Extracting gate netlist of module `$paramod$bd1abbf98cdc0d8d84493be79dbb005b11d19bd1\plusarg_reader' to `<abc-temp-dir>/input.blif'..
11.23.3. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
11.23.4. Extracting gate netlist of module `\AMOALU' to `<abc-temp-dir>/input.blif'..
11.23.5. Extracting gate netlist of module `\BreakpointUnit' to `<abc-temp-dir>/input.blif'..
11.23.6. Extracting gate netlist of module `\CSRFile' to `<abc-temp-dir>/input.blif'..
11.23.7. Extracting gate netlist of module `\DCache' to `<abc-temp-dir>/input.blif'..
11.23.8. Extracting gate netlist of module `\DCacheDataArray' to `<abc-temp-dir>/input.blif'..
11.23.9. Extracting gate netlist of module `\DCacheModuleanon2' to `<abc-temp-dir>/input.blif'..
11.23.10. Extracting gate netlist of module `\DCacheModuleanon3' to `<abc-temp-dir>/input.blif'..
11.23.11. Extracting gate netlist of module `\Frontend' to `<abc-temp-dir>/input.blif'..
11.23.12. Extracting gate netlist of module `\HellaCacheArbiter' to `<abc-temp-dir>/input.blif'..
11.23.13. Extracting gate netlist of module `\IBuf' to `<abc-temp-dir>/input.blif'..
11.23.14. Extracting gate netlist of module `\ICache' to `<abc-temp-dir>/input.blif'..
11.23.15. Extracting gate netlist of module `\IntSyncCrossingSink' to `<abc-temp-dir>/input.blif'..
11.23.16. Extracting gate netlist of module `\IntSyncCrossingSink_1' to `<abc-temp-dir>/input.blif'..
11.23.17. Extracting gate netlist of module `\IntSyncCrossingSink_2' to `<abc-temp-dir>/input.blif'..
11.23.18. Extracting gate netlist of module `\IntXbar_4' to `<abc-temp-dir>/input.blif'..
11.23.19. Extracting gate netlist of module `\MulDiv' to `<abc-temp-dir>/input.blif'..
11.23.20. Extracting gate netlist of module `\PMPChecker' to `<abc-temp-dir>/input.blif'..
11.23.21. Extracting gate netlist of module `\PTW' to `<abc-temp-dir>/input.blif'..
11.23.22. Extracting gate netlist of module `\PlusArgTimeout' to `<abc-temp-dir>/input.blif'..
11.23.23. Extracting gate netlist of module `\Queue_38' to `<abc-temp-dir>/input.blif'..
11.23.24. Extracting gate netlist of module `\Queue_39' to `<abc-temp-dir>/input.blif'..
11.23.25. Extracting gate netlist of module `\Queue_40' to `<abc-temp-dir>/input.blif'..
11.23.26. Extracting gate netlist of module `\Queue_41' to `<abc-temp-dir>/input.blif'..
11.23.27. Extracting gate netlist of module `\RVCExpander' to `<abc-temp-dir>/input.blif'..
11.23.28. Extracting gate netlist of module `\Repeater_5' to `<abc-temp-dir>/input.blif'..
11.23.29. Extracting gate netlist of module `\Rocket' to `<abc-temp-dir>/input.blif'..
11.23.30. Extracting gate netlist of module `\RocketTile' to `<abc-temp-dir>/input.blif'..
11.23.31. Extracting gate netlist of module `\ScratchpadSlavePort' to `<abc-temp-dir>/input.blif'..
11.23.32. Extracting gate netlist of module `\ShiftQueue' to `<abc-temp-dir>/input.blif'..
11.23.33. Extracting gate netlist of module `\SynchronizerShiftReg_w1_d3' to `<abc-temp-dir>/input.blif'..
11.23.34. Extracting gate netlist of module `\TLB' to `<abc-temp-dir>/input.blif'..
11.23.35. Extracting gate netlist of module `\TLB_1' to `<abc-temp-dir>/input.blif'..
11.23.36. Extracting gate netlist of module `\TLBuffer_10' to `<abc-temp-dir>/input.blif'..
11.23.37. Extracting gate netlist of module `\TLBuffer_11' to `<abc-temp-dir>/input.blif'..
11.23.38. Extracting gate netlist of module `\TLFragmenter_5' to `<abc-temp-dir>/input.blif'..
11.23.39. Extracting gate netlist of module `\TLMonitor_35' to `<abc-temp-dir>/input.blif'..
11.23.40. Extracting gate netlist of module `\TLMonitor_36' to `<abc-temp-dir>/input.blif'..
11.23.41. Extracting gate netlist of module `\TLMonitor_37' to `<abc-temp-dir>/input.blif'..
11.23.42. Extracting gate netlist of module `\TLXbar_8' to `<abc-temp-dir>/input.blif'..
11.23.43. Extracting gate netlist of module `\TLXbar_9' to `<abc-temp-dir>/input.blif'..
11.23.44. Extracting gate netlist of module `\data_arrays_0' to `<abc-temp-dir>/input.blif'..
11.23.45. Extracting gate netlist of module `\data_arrays_0_0' to `<abc-temp-dir>/input.blif'..
11.23.46. Extracting gate netlist of module `\data_arrays_0_0_ext' to `<abc-temp-dir>/input.blif'..
11.23.47. Extracting gate netlist of module `\data_arrays_0_ext' to `<abc-temp-dir>/input.blif'..
11.23.48. Extracting gate netlist of module `\tag_array' to `<abc-temp-dir>/input.blif'..
11.23.49. Extracting gate netlist of module `\tag_array_ext' to `<abc-temp-dir>/input.blif'..
11.24. Executing OPT pass (performing simple optimizations).
11.24.1. Executing OPT_EXPR pass (perform const folding).
11.24.2. Executing OPT_MERGE pass (detect identical cells).
11.24.3. Executing OPT_DFF pass (perform DFF optimizations).
11.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
11.24.5. Rerunning OPT passes. (Removed registers in this run.)
11.24.6. Executing OPT_EXPR pass (perform const folding).
11.24.7. Executing OPT_MERGE pass (detect identical cells).
11.24.8. Executing OPT_DFF pass (perform DFF optimizations).
11.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
11.24.10. Rerunning OPT passes. (Removed registers in this run.)
11.24.11. Executing OPT_EXPR pass (perform const folding).
11.24.12. Executing OPT_MERGE pass (detect identical cells).
11.24.13. Executing OPT_DFF pass (perform DFF optimizations).
11.24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
11.24.15. Finished fast OPT passes.
11.25. Executing HIERARCHY pass (managing design hierarchy).
11.25.1. Analyzing design hierarchy..
11.25.2. Analyzing design hierarchy..
11.26. Printing statistics.
11.27. Executing CHECK pass (checking for obvious problems).
12. Executing TECHMAP pass (map to technology primitives).
12.1. Executing Verilog-2005 frontend: /home/jborg/Data/Research/DLPnR/OpenROAD-flow-scripts/flow/platforms/nangate45/cells_adders.v
12.2. Continuing TECHMAP pass.
13. Executing TECHMAP pass (map to technology primitives).
13.1. Executing Verilog-2005 frontend: /home/jborg/Data/Research/DLPnR/OpenROAD-flow-scripts/tools/install/yosys/bin/../share/yosys/techmap.v
13.2. Continuing TECHMAP pass.
14. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
14.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
abc -script /home/jborg/Data/Research/DLPnR/OpenROAD-flow-scripts/flow/scripts/abc_speed.script -liberty ./objects/nangate45/tinyRocket/base/lib/NangateOpenCellLibrary_typical.lib -constr ./objects/nangate45/tinyRocket/base/abc.constr -D 2.0322
15. Executing ABC pass (technology mapping using ABC).
15.1. Extracting gate netlist of module `\BreakpointUnit' to `<abc-temp-dir>/input.blif'..
15.1.1. Executing ABC.
15.1.2. Re-integrating ABC results.
15.2. Extracting gate netlist of module `\CSRFile' to `<abc-temp-dir>/input.blif'..
15.2.1. Executing ABC.
15.2.2. Re-integrating ABC results.
15.3. Extracting gate netlist of module `\DCache' to `<abc-temp-dir>/input.blif'..
15.3.1. Executing ABC.
15.3.2. Re-integrating ABC results.
15.4. Extracting gate netlist of module `\DCacheDataArray' to `<abc-temp-dir>/input.blif'..
15.4.1. Executing ABC.
15.4.2. Re-integrating ABC results.
15.5. Extracting gate netlist of module `\DCacheModuleanon2' to `<abc-temp-dir>/input.blif'..
15.5.1. Executing ABC.
15.5.2. Re-integrating ABC results.
15.6. Extracting gate netlist of module `\DCacheModuleanon3' to `<abc-temp-dir>/input.blif'..
15.6.1. Executing ABC.
15.6.2. Re-integrating ABC results.
15.7. Extracting gate netlist of module `\Frontend' to `<abc-temp-dir>/input.blif'..
15.7.1. Executing ABC.
15.7.2. Re-integrating ABC results.
15.8. Extracting gate netlist of module `\HellaCacheArbiter' to `<abc-temp-dir>/input.blif'..
15.8.1. Executing ABC.
15.8.2. Re-integrating ABC results.
15.9. Extracting gate netlist of module `\IBuf' to `<abc-temp-dir>/input.blif'..
15.9.1. Executing ABC.
15.9.2. Re-integrating ABC results.
15.10. Extracting gate netlist of module `\ICache' to `<abc-temp-dir>/input.blif'..
15.10.1. Executing ABC.
15.10.2. Re-integrating ABC results.
15.11. Extracting gate netlist of module `\IntSyncCrossingSink' to `<abc-temp-dir>/input.blif'..
15.12. Extracting gate netlist of module `\IntSyncCrossingSink_1' to `<abc-temp-dir>/input.blif'..
15.13. Extracting gate netlist of module `\IntSyncCrossingSink_2' to `<abc-temp-dir>/input.blif'..
15.14. Extracting gate netlist of module `\IntXbar_4' to `<abc-temp-dir>/input.blif'..
15.15. Extracting gate netlist of module `\MulDiv' to `<abc-temp-dir>/input.blif'..
15.15.1. Executing ABC.
15.15.2. Re-integrating ABC results.
15.16. Extracting gate netlist of module `\PMPChecker' to `<abc-temp-dir>/input.blif'..
15.16.1. Executing ABC.
15.16.2. Re-integrating ABC results.
15.17. Extracting gate netlist of module `\PTW' to `<abc-temp-dir>/input.blif'..
15.18. Extracting gate netlist of module `\ALU' to `<abc-temp-dir>/input.blif'..
15.18.1. Executing ABC.
15.18.2. Re-integrating ABC results.
15.19. Extracting gate netlist of module `\Queue_38' to `<abc-temp-dir>/input.blif'..
15.19.1. Executing ABC.
15.19.2. Re-integrating ABC results.
15.20. Extracting gate netlist of module `\Queue_39' to `<abc-temp-dir>/input.blif'..
15.20.1. Executing ABC.
15.20.2. Re-integrating ABC results.
15.21. Extracting gate netlist of module `\Queue_40' to `<abc-temp-dir>/input.blif'..
15.21.1. Executing ABC.
15.21.2. Re-integrating ABC results.
15.22. Extracting gate netlist of module `\Queue_41' to `<abc-temp-dir>/input.blif'..
15.22.1. Executing ABC.
15.22.2. Re-integrating ABC results.
15.23. Extracting gate netlist of module `\RVCExpander' to `<abc-temp-dir>/input.blif'..
15.23.1. Executing ABC.
15.23.2. Re-integrating ABC results.
15.24. Extracting gate netlist of module `\Repeater_5' to `<abc-temp-dir>/input.blif'..
15.24.1. Executing ABC.
15.24.2. Re-integrating ABC results.
15.25. Extracting gate netlist of module `\Rocket' to `<abc-temp-dir>/input.blif'..
15.25.1. Executing ABC.
15.25.2. Re-integrating ABC results.
15.26. Extracting gate netlist of module `\RocketTile' to `<abc-temp-dir>/input.blif'..
15.27. Extracting gate netlist of module `\ScratchpadSlavePort' to `<abc-temp-dir>/input.blif'..
15.27.1. Executing ABC.
15.27.2. Re-integrating ABC results.
15.28. Extracting gate netlist of module `\ShiftQueue' to `<abc-temp-dir>/input.blif'..
15.28.1. Executing ABC.
15.28.2. Re-integrating ABC results.
15.29. Extracting gate netlist of module `\SynchronizerShiftReg_w1_d3' to `<abc-temp-dir>/input.blif'..
15.30. Extracting gate netlist of module `\TLB' to `<abc-temp-dir>/input.blif'..
15.30.1. Executing ABC.
15.30.2. Re-integrating ABC results.
15.31. Extracting gate netlist of module `\TLB_1' to `<abc-temp-dir>/input.blif'..
15.31.1. Executing ABC.
15.31.2. Re-integrating ABC results.
15.32. Extracting gate netlist of module `\TLBuffer_10' to `<abc-temp-dir>/input.blif'..
15.33. Extracting gate netlist of module `\TLBuffer_11' to `<abc-temp-dir>/input.blif'..
15.34. Extracting gate netlist of module `\TLFragmenter_5' to `<abc-temp-dir>/input.blif'..
15.34.1. Executing ABC.
15.34.2. Re-integrating ABC results.
15.35. Extracting gate netlist of module `\AMOALU' to `<abc-temp-dir>/input.blif'..
15.35.1. Executing ABC.
15.35.2. Re-integrating ABC results.
15.36. Extracting gate netlist of module `\TLXbar_8' to `<abc-temp-dir>/input.blif'..
15.36.1. Executing ABC.
15.36.2. Re-integrating ABC results.
15.37. Extracting gate netlist of module `\TLXbar_9' to `<abc-temp-dir>/input.blif'..
15.38. Extracting gate netlist of module `\data_arrays_0' to `<abc-temp-dir>/input.blif'..
15.39. Extracting gate netlist of module `\data_arrays_0_0' to `<abc-temp-dir>/input.blif'..
15.40. Extracting gate netlist of module `\data_arrays_0_0_ext' to `<abc-temp-dir>/input.blif'..
15.41. Extracting gate netlist of module `\data_arrays_0_ext' to `<abc-temp-dir>/input.blif'..
15.42. Extracting gate netlist of module `\tag_array' to `<abc-temp-dir>/input.blif'..
15.43. Extracting gate netlist of module `\tag_array_ext' to `<abc-temp-dir>/input.blif'..
15.43.1. Executing ABC.
15.43.2. Re-integrating ABC results.
16. Printing statistics.
Ungroup modules of size 5000
17. Executing HIERARCHY pass (managing design hierarchy).
17.1. Analyzing design hierarchy..
17.2. Analyzing design hierarchy..
Found module RocketTile
Found module DCache
Found module AMOALU
Found module DCacheDataArray
Found module data_arrays_0
Found module data_arrays_0_ext
Found module DCacheModuleanon2
Found module DCacheModuleanon3
Found module TLB
Found module PMPChecker
Found module Frontend
Found module ICache
Found module data_arrays_0_0
Found module data_arrays_0_0_ext
Found module tag_array
Found module tag_array_ext
Found module ShiftQueue
Found module TLB_1
Found module PMPChecker
Found module HellaCacheArbiter
Found module IntSyncCrossingSink
Found module SynchronizerShiftReg_w1_d3
Found module IntSyncCrossingSink_1
Found module IntSyncCrossingSink_2
Found module IntXbar_4
Found module PTW
Found module Rocket
Found module ALU
Found module BreakpointUnit
Found module CSRFile
Found module IBuf
Found module RVCExpander
Found module MulDiv
Found module ScratchpadSlavePort
Found module TLBuffer_10
Found module Queue_38
Found module Queue_39
Found module TLBuffer_11
Found module Queue_40
Found module Queue_41
Found module TLFragmenter_5
Found module Repeater_5
Found module TLXbar_8
Found module TLXbar_9
18. Printing statistics.
Area of module \RocketTile is 54759.292000
Preserving hierarchical module: \RocketTile
19. Printing statistics.
Area of module \DCache is 7188.384000
Preserving hierarchical module: \DCache
20. Printing statistics.
Area of module \AMOALU is 775.922000
21. Printing statistics.
Area of module \DCacheDataArray is 1241.688000
22. Printing statistics.
Area of module \data_arrays_0 is 1240.624000
23. Printing statistics.
Area of module \data_arrays_0_ext is 1240.624000
24. Printing statistics.
Area of module \DCacheModuleanon2 is 165.186000
25. Printing statistics.
Area of module \DCacheModuleanon3 is 207.214000
26. Printing statistics.
Area of module \TLB is 1884.344000
27. Printing statistics.
Area of module \PMPChecker is 1808.268000
28. Printing statistics.
Area of module \Frontend is 8280.846000
Preserving hierarchical module: \Frontend
29. Printing statistics.
Area of module \ICache is 2819.068000
30. Printing statistics.
Area of module \data_arrays_0_0 is 1240.624000
31. Printing statistics.
Area of module \data_arrays_0_0_ext is 1240.624000
32. Printing statistics.
Area of module \tag_array is 861.574000
33. Printing statistics.
Area of module \tag_array_ext is 861.574000
34. Printing statistics.
Area of module \ShiftQueue is 2904.454000
35. Printing statistics.
Area of module \TLB_1 is 1838.858000
36. Printing statistics.
Area of module \PMPChecker is 1808.268000
37. Printing statistics.
Area of module \HellaCacheArbiter is 198.702000
38. Printing statistics.
Area of module \IntSyncCrossingSink is 13.566000
39. Printing statistics.
Area of module \SynchronizerShiftReg_w1_d3 is 13.566000
40. Printing statistics.
41. Printing statistics.
42. Printing statistics.
43. Printing statistics.
44. Printing statistics.
Area of module \Rocket is 32964.050000
Preserving hierarchical module: \Rocket
45. Printing statistics.
Area of module \ALU is 1494.122000
46. Printing statistics.
Area of module \BreakpointUnit is 408.576000
47. Printing statistics.
Area of module \CSRFile is 7907.648000
Preserving hierarchical module: \CSRFile
48. Printing statistics.
Area of module \IBuf is 1102.836000
49. Printing statistics.
Area of module \RVCExpander is 506.730000
50. Printing statistics.
Area of module \MulDiv is 4600.736000
51. Printing statistics.
Area of module \ScratchpadSlavePort is 942.704000
52. Printing statistics.
Area of module \TLBuffer_10 is 2101.134000
53. Printing statistics.
Area of module \Queue_38 is 1354.472000
54. Printing statistics.
Area of module \Queue_39 is 746.662000
55. Printing statistics.
Area of module \TLBuffer_11 is 2093.686000
56. Printing statistics.
Area of module \Queue_40 is 1383.732000
57. Printing statistics.
Area of module \Queue_41 is 709.954000
58. Printing statistics.
Area of module \TLFragmenter_5 is 637.868000
59. Printing statistics.
Area of module \Repeater_5 is 443.954000
60. Printing statistics.
Area of module \TLXbar_8 is 338.352000
61. Printing statistics.
Warnings: 9 unique messages, 75 total
End of script. Logfile hash: 0989480b1f, CPU: user 14.83s system 0.10s, MEM: 242.41 MB peak
Yosys 0.33 (git sha1 2584903a0, gcc 11.4.0-1ubuntu1~22.04 -fPIC -Os)
Time spent: 63% 2x abc (25 sec), 7% 83x opt_expr (3 sec), ...
Elapsed time: 0:39.79[h:]min:sec. CPU time: user 38.81 sys 0.98 (100%). Peak memory: 248224KB.
